// Generated by view binder compiler. Do not edit!
package com.hospital.dietary.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.hospital.dietary.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogPasswordPolicyBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText expirationDaysEditText;

  @NonNull
  public final EditText minLengthEditText;

  @NonNull
  public final CheckBox requireLowercaseCheckBox;

  @NonNull
  public final CheckBox requireNumberCheckBox;

  @NonNull
  public final CheckBox requireSpecialCheckBox;

  @NonNull
  public final CheckBox requireUppercaseCheckBox;

  private DialogPasswordPolicyBinding(@NonNull LinearLayout rootView,
      @NonNull EditText expirationDaysEditText, @NonNull EditText minLengthEditText,
      @NonNull CheckBox requireLowercaseCheckBox, @NonNull CheckBox requireNumberCheckBox,
      @NonNull CheckBox requireSpecialCheckBox, @NonNull CheckBox requireUppercaseCheckBox) {
    this.rootView = rootView;
    this.expirationDaysEditText = expirationDaysEditText;
    this.minLengthEditText = minLengthEditText;
    this.requireLowercaseCheckBox = requireLowercaseCheckBox;
    this.requireNumberCheckBox = requireNumberCheckBox;
    this.requireSpecialCheckBox = requireSpecialCheckBox;
    this.requireUppercaseCheckBox = requireUppercaseCheckBox;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogPasswordPolicyBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogPasswordPolicyBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_password_policy, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogPasswordPolicyBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.expirationDaysEditText;
      EditText expirationDaysEditText = ViewBindings.findChildViewById(rootView, id);
      if (expirationDaysEditText == null) {
        break missingId;
      }

      id = R.id.minLengthEditText;
      EditText minLengthEditText = ViewBindings.findChildViewById(rootView, id);
      if (minLengthEditText == null) {
        break missingId;
      }

      id = R.id.requireLowercaseCheckBox;
      CheckBox requireLowercaseCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (requireLowercaseCheckBox == null) {
        break missingId;
      }

      id = R.id.requireNumberCheckBox;
      CheckBox requireNumberCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (requireNumberCheckBox == null) {
        break missingId;
      }

      id = R.id.requireSpecialCheckBox;
      CheckBox requireSpecialCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (requireSpecialCheckBox == null) {
        break missingId;
      }

      id = R.id.requireUppercaseCheckBox;
      CheckBox requireUppercaseCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (requireUppercaseCheckBox == null) {
        break missingId;
      }

      return new DialogPasswordPolicyBinding((LinearLayout) rootView, expirationDaysEditText,
          minLengthEditText, requireLowercaseCheckBox, requireNumberCheckBox,
          requireSpecialCheckBox, requireUppercaseCheckBox);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
