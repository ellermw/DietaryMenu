// Generated by view binder compiler. Do not edit!
package com.hospital.dietary.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.hospital.dietary.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemUserRowBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView userEmail;

  @NonNull
  public final TextView userFullName;

  @NonNull
  public final TextView userIcon;

  @NonNull
  public final TextView userRole;

  @NonNull
  public final View userStatusIndicator;

  @NonNull
  public final TextView userUsername;

  private ItemUserRowBinding(@NonNull LinearLayout rootView, @NonNull TextView userEmail,
      @NonNull TextView userFullName, @NonNull TextView userIcon, @NonNull TextView userRole,
      @NonNull View userStatusIndicator, @NonNull TextView userUsername) {
    this.rootView = rootView;
    this.userEmail = userEmail;
    this.userFullName = userFullName;
    this.userIcon = userIcon;
    this.userRole = userRole;
    this.userStatusIndicator = userStatusIndicator;
    this.userUsername = userUsername;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemUserRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemUserRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_user_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemUserRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.userEmail;
      TextView userEmail = ViewBindings.findChildViewById(rootView, id);
      if (userEmail == null) {
        break missingId;
      }

      id = R.id.userFullName;
      TextView userFullName = ViewBindings.findChildViewById(rootView, id);
      if (userFullName == null) {
        break missingId;
      }

      id = R.id.userIcon;
      TextView userIcon = ViewBindings.findChildViewById(rootView, id);
      if (userIcon == null) {
        break missingId;
      }

      id = R.id.userRole;
      TextView userRole = ViewBindings.findChildViewById(rootView, id);
      if (userRole == null) {
        break missingId;
      }

      id = R.id.userStatusIndicator;
      View userStatusIndicator = ViewBindings.findChildViewById(rootView, id);
      if (userStatusIndicator == null) {
        break missingId;
      }

      id = R.id.userUsername;
      TextView userUsername = ViewBindings.findChildViewById(rootView, id);
      if (userUsername == null) {
        break missingId;
      }

      return new ItemUserRowBinding((LinearLayout) rootView, userEmail, userFullName, userIcon,
          userRole, userStatusIndicator, userUsername);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
