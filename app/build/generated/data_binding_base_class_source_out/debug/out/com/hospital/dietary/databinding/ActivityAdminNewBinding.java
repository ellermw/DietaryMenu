// Generated by view binder compiler. Do not edit!
package com.hospital.dietary.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TabHost;
import android.widget.TabWidget;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.hospital.dietary.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAdminNewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button addItemButton;

  @NonNull
  public final Button addUserButton;

  @NonNull
  public final Spinner categoryFilterSpinner;

  @NonNull
  public final EditText itemSearchEditText;

  @NonNull
  public final ListView itemsListView;

  @NonNull
  public final LinearLayout tabItems;

  @NonNull
  public final LinearLayout tabUsers;

  @NonNull
  public final FrameLayout tabcontent;

  @NonNull
  public final TabHost tabhost;

  @NonNull
  public final TabWidget tabs;

  @NonNull
  public final EditText userSearchEditText;

  @NonNull
  public final ListView usersListView;

  private ActivityAdminNewBinding(@NonNull LinearLayout rootView, @NonNull Button addItemButton,
      @NonNull Button addUserButton, @NonNull Spinner categoryFilterSpinner,
      @NonNull EditText itemSearchEditText, @NonNull ListView itemsListView,
      @NonNull LinearLayout tabItems, @NonNull LinearLayout tabUsers,
      @NonNull FrameLayout tabcontent, @NonNull TabHost tabhost, @NonNull TabWidget tabs,
      @NonNull EditText userSearchEditText, @NonNull ListView usersListView) {
    this.rootView = rootView;
    this.addItemButton = addItemButton;
    this.addUserButton = addUserButton;
    this.categoryFilterSpinner = categoryFilterSpinner;
    this.itemSearchEditText = itemSearchEditText;
    this.itemsListView = itemsListView;
    this.tabItems = tabItems;
    this.tabUsers = tabUsers;
    this.tabcontent = tabcontent;
    this.tabhost = tabhost;
    this.tabs = tabs;
    this.userSearchEditText = userSearchEditText;
    this.usersListView = usersListView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAdminNewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAdminNewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_admin_new, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAdminNewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addItemButton;
      Button addItemButton = ViewBindings.findChildViewById(rootView, id);
      if (addItemButton == null) {
        break missingId;
      }

      id = R.id.addUserButton;
      Button addUserButton = ViewBindings.findChildViewById(rootView, id);
      if (addUserButton == null) {
        break missingId;
      }

      id = R.id.categoryFilterSpinner;
      Spinner categoryFilterSpinner = ViewBindings.findChildViewById(rootView, id);
      if (categoryFilterSpinner == null) {
        break missingId;
      }

      id = R.id.itemSearchEditText;
      EditText itemSearchEditText = ViewBindings.findChildViewById(rootView, id);
      if (itemSearchEditText == null) {
        break missingId;
      }

      id = R.id.itemsListView;
      ListView itemsListView = ViewBindings.findChildViewById(rootView, id);
      if (itemsListView == null) {
        break missingId;
      }

      id = R.id.tab_items;
      LinearLayout tabItems = ViewBindings.findChildViewById(rootView, id);
      if (tabItems == null) {
        break missingId;
      }

      id = R.id.tab_users;
      LinearLayout tabUsers = ViewBindings.findChildViewById(rootView, id);
      if (tabUsers == null) {
        break missingId;
      }

      id = android.R.id.tabcontent;
      FrameLayout tabcontent = ViewBindings.findChildViewById(rootView, id);
      if (tabcontent == null) {
        break missingId;
      }

      id = android.R.id.tabhost;
      TabHost tabhost = ViewBindings.findChildViewById(rootView, id);
      if (tabhost == null) {
        break missingId;
      }

      id = android.R.id.tabs;
      TabWidget tabs = ViewBindings.findChildViewById(rootView, id);
      if (tabs == null) {
        break missingId;
      }

      id = R.id.userSearchEditText;
      EditText userSearchEditText = ViewBindings.findChildViewById(rootView, id);
      if (userSearchEditText == null) {
        break missingId;
      }

      id = R.id.usersListView;
      ListView usersListView = ViewBindings.findChildViewById(rootView, id);
      if (usersListView == null) {
        break missingId;
      }

      return new ActivityAdminNewBinding((LinearLayout) rootView, addItemButton, addUserButton,
          categoryFilterSpinner, itemSearchEditText, itemsListView, tabItems, tabUsers, tabcontent,
          tabhost, tabs, userSearchEditText, usersListView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
