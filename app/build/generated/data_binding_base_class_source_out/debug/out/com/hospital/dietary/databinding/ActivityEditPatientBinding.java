// Generated by view binder compiler. Do not edit!
package com.hospital.dietary.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.hospital.dietary.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEditPatientBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final CheckBox adaDietCheckBox;

  @NonNull
  public final TextView adaDietLabel;

  @NonNull
  public final CheckBox biteSizeCheckBox;

  @NonNull
  public final CheckBox breadOkCheckBox;

  @NonNull
  public final Button cancelButton;

  @NonNull
  public final Button deletePatientButton;

  @NonNull
  public final Spinner dietSpinner;

  @NonNull
  public final CheckBox dischargedCheckBox;

  @NonNull
  public final CheckBox extraGravyCheckBox;

  @NonNull
  public final TextInputEditText firstNameInput;

  @NonNull
  public final Spinner fluidRestrictionSpinner;

  @NonNull
  public final CheckBox honeyThickCheckBox;

  @NonNull
  public final TextInputEditText lastNameInput;

  @NonNull
  public final CheckBox meatsOnlyCheckBox;

  @NonNull
  public final CheckBox mechanicalChoppedCheckBox;

  @NonNull
  public final CheckBox mechanicalGroundCheckBox;

  @NonNull
  public final CheckBox nectarThickCheckBox;

  @NonNull
  public final CheckBox puddingThickCheckBox;

  @NonNull
  public final Spinner roomSpinner;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final Button updatePatientButton;

  @NonNull
  public final Spinner wingSpinner;

  private ActivityEditPatientBinding(@NonNull ScrollView rootView,
      @NonNull CheckBox adaDietCheckBox, @NonNull TextView adaDietLabel,
      @NonNull CheckBox biteSizeCheckBox, @NonNull CheckBox breadOkCheckBox,
      @NonNull Button cancelButton, @NonNull Button deletePatientButton,
      @NonNull Spinner dietSpinner, @NonNull CheckBox dischargedCheckBox,
      @NonNull CheckBox extraGravyCheckBox, @NonNull TextInputEditText firstNameInput,
      @NonNull Spinner fluidRestrictionSpinner, @NonNull CheckBox honeyThickCheckBox,
      @NonNull TextInputEditText lastNameInput, @NonNull CheckBox meatsOnlyCheckBox,
      @NonNull CheckBox mechanicalChoppedCheckBox, @NonNull CheckBox mechanicalGroundCheckBox,
      @NonNull CheckBox nectarThickCheckBox, @NonNull CheckBox puddingThickCheckBox,
      @NonNull Spinner roomSpinner, @NonNull Toolbar toolbar, @NonNull Button updatePatientButton,
      @NonNull Spinner wingSpinner) {
    this.rootView = rootView;
    this.adaDietCheckBox = adaDietCheckBox;
    this.adaDietLabel = adaDietLabel;
    this.biteSizeCheckBox = biteSizeCheckBox;
    this.breadOkCheckBox = breadOkCheckBox;
    this.cancelButton = cancelButton;
    this.deletePatientButton = deletePatientButton;
    this.dietSpinner = dietSpinner;
    this.dischargedCheckBox = dischargedCheckBox;
    this.extraGravyCheckBox = extraGravyCheckBox;
    this.firstNameInput = firstNameInput;
    this.fluidRestrictionSpinner = fluidRestrictionSpinner;
    this.honeyThickCheckBox = honeyThickCheckBox;
    this.lastNameInput = lastNameInput;
    this.meatsOnlyCheckBox = meatsOnlyCheckBox;
    this.mechanicalChoppedCheckBox = mechanicalChoppedCheckBox;
    this.mechanicalGroundCheckBox = mechanicalGroundCheckBox;
    this.nectarThickCheckBox = nectarThickCheckBox;
    this.puddingThickCheckBox = puddingThickCheckBox;
    this.roomSpinner = roomSpinner;
    this.toolbar = toolbar;
    this.updatePatientButton = updatePatientButton;
    this.wingSpinner = wingSpinner;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEditPatientBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEditPatientBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_edit_patient, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEditPatientBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.adaDietCheckBox;
      CheckBox adaDietCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (adaDietCheckBox == null) {
        break missingId;
      }

      id = R.id.adaDietLabel;
      TextView adaDietLabel = ViewBindings.findChildViewById(rootView, id);
      if (adaDietLabel == null) {
        break missingId;
      }

      id = R.id.biteSizeCheckBox;
      CheckBox biteSizeCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (biteSizeCheckBox == null) {
        break missingId;
      }

      id = R.id.breadOkCheckBox;
      CheckBox breadOkCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (breadOkCheckBox == null) {
        break missingId;
      }

      id = R.id.cancelButton;
      Button cancelButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.deletePatientButton;
      Button deletePatientButton = ViewBindings.findChildViewById(rootView, id);
      if (deletePatientButton == null) {
        break missingId;
      }

      id = R.id.dietSpinner;
      Spinner dietSpinner = ViewBindings.findChildViewById(rootView, id);
      if (dietSpinner == null) {
        break missingId;
      }

      id = R.id.dischargedCheckBox;
      CheckBox dischargedCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (dischargedCheckBox == null) {
        break missingId;
      }

      id = R.id.extraGravyCheckBox;
      CheckBox extraGravyCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (extraGravyCheckBox == null) {
        break missingId;
      }

      id = R.id.firstNameInput;
      TextInputEditText firstNameInput = ViewBindings.findChildViewById(rootView, id);
      if (firstNameInput == null) {
        break missingId;
      }

      id = R.id.fluidRestrictionSpinner;
      Spinner fluidRestrictionSpinner = ViewBindings.findChildViewById(rootView, id);
      if (fluidRestrictionSpinner == null) {
        break missingId;
      }

      id = R.id.honeyThickCheckBox;
      CheckBox honeyThickCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (honeyThickCheckBox == null) {
        break missingId;
      }

      id = R.id.lastNameInput;
      TextInputEditText lastNameInput = ViewBindings.findChildViewById(rootView, id);
      if (lastNameInput == null) {
        break missingId;
      }

      id = R.id.meatsOnlyCheckBox;
      CheckBox meatsOnlyCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (meatsOnlyCheckBox == null) {
        break missingId;
      }

      id = R.id.mechanicalChoppedCheckBox;
      CheckBox mechanicalChoppedCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (mechanicalChoppedCheckBox == null) {
        break missingId;
      }

      id = R.id.mechanicalGroundCheckBox;
      CheckBox mechanicalGroundCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (mechanicalGroundCheckBox == null) {
        break missingId;
      }

      id = R.id.nectarThickCheckBox;
      CheckBox nectarThickCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (nectarThickCheckBox == null) {
        break missingId;
      }

      id = R.id.puddingThickCheckBox;
      CheckBox puddingThickCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (puddingThickCheckBox == null) {
        break missingId;
      }

      id = R.id.roomSpinner;
      Spinner roomSpinner = ViewBindings.findChildViewById(rootView, id);
      if (roomSpinner == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.updatePatientButton;
      Button updatePatientButton = ViewBindings.findChildViewById(rootView, id);
      if (updatePatientButton == null) {
        break missingId;
      }

      id = R.id.wingSpinner;
      Spinner wingSpinner = ViewBindings.findChildViewById(rootView, id);
      if (wingSpinner == null) {
        break missingId;
      }

      return new ActivityEditPatientBinding((ScrollView) rootView, adaDietCheckBox, adaDietLabel,
          biteSizeCheckBox, breadOkCheckBox, cancelButton, deletePatientButton, dietSpinner,
          dischargedCheckBox, extraGravyCheckBox, firstNameInput, fluidRestrictionSpinner,
          honeyThickCheckBox, lastNameInput, meatsOnlyCheckBox, mechanicalChoppedCheckBox,
          mechanicalGroundCheckBox, nectarThickCheckBox, puddingThickCheckBox, roomSpinner, toolbar,
          updatePatientButton, wingSpinner);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
