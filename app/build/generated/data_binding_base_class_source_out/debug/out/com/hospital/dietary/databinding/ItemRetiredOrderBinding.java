// Generated by view binder compiler. Do not edit!
package com.hospital.dietary.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.hospital.dietary.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemRetiredOrderBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView dietText;

  @NonNull
  public final TextView locationText;

  @NonNull
  public final TextView mealSummaryText;

  @NonNull
  public final TextView orderDateText;

  @NonNull
  public final TextView patientNameText;

  private ItemRetiredOrderBinding(@NonNull LinearLayout rootView, @NonNull TextView dietText,
      @NonNull TextView locationText, @NonNull TextView mealSummaryText,
      @NonNull TextView orderDateText, @NonNull TextView patientNameText) {
    this.rootView = rootView;
    this.dietText = dietText;
    this.locationText = locationText;
    this.mealSummaryText = mealSummaryText;
    this.orderDateText = orderDateText;
    this.patientNameText = patientNameText;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemRetiredOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemRetiredOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_retired_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemRetiredOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dietText;
      TextView dietText = ViewBindings.findChildViewById(rootView, id);
      if (dietText == null) {
        break missingId;
      }

      id = R.id.locationText;
      TextView locationText = ViewBindings.findChildViewById(rootView, id);
      if (locationText == null) {
        break missingId;
      }

      id = R.id.mealSummaryText;
      TextView mealSummaryText = ViewBindings.findChildViewById(rootView, id);
      if (mealSummaryText == null) {
        break missingId;
      }

      id = R.id.orderDateText;
      TextView orderDateText = ViewBindings.findChildViewById(rootView, id);
      if (orderDateText == null) {
        break missingId;
      }

      id = R.id.patientNameText;
      TextView patientNameText = ViewBindings.findChildViewById(rootView, id);
      if (patientNameText == null) {
        break missingId;
      }

      return new ItemRetiredOrderBinding((LinearLayout) rootView, dietText, locationText,
          mealSummaryText, orderDateText, patientNameText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
